/****************************************************************************
**
** Copyright (C) 2016 Pelagicore AG
** Contact: https://www.qt.io/licensing/
**
** This file is part of the documentation of the Pelagicore Application Manager.
**
** $QT_BEGIN_LICENSE:FDL-QTAS$
** Commercial License Usage
** Licensees holding valid commercial Qt Automotive Suite licenses may use
** this file in accordance with the commercial license agreement provided
** with the Software or, alternatively, in accordance with the terms
** contained in a written agreement between you and The Qt Company.  For
** licensing terms and conditions see https://www.qt.io/terms-conditions.
** For further information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!

\page howto-apps.html
\title Writing Applications

Writing an application that can be run as a client within the application-manager is not that
much different from writing a stand-alone QML application. It basically boils down to three
additional tasks:

\list 1

    \li If you write a QML application, make the root element of your QML scene an
    ApplicationManagerWindow (or derive your own custom root item from it).

    \li Provide a valid \l{Manifest definition}{info.yaml} file.

    \li Make the application-manager aware of your application by running \c{appman
    --recreate-database}.

\endlist

\section2 The Root Item

Making the root item of your QML application an ApplicationManagerWindow is only mandatory if you
ever want to run in single-process mode (without Wayland). See ApplicationManagerWindow for more
information.

\section2 The Manifest and Updating the Database

The \l{Manifest Definition} documentation has all the information to produce a minimal \c info.yaml
file that should get you going.

Recursively finding and parsing \c info.yaml files for potentially hundreds of applications can
be a very time consuming task and would severely slow down application-manager's
startup. Therefore, all manifest files are cached in a binary database. In order to make changes
to an \c info.yaml file known to the application-manager, you have to force a rebuild of this
database by calling \c{appman --recreate-database}.

\note Dynamically adding/updating/removing single applications is supported via the
ApplicationInstaller interface.

*/
