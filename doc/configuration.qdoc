/****************************************************************************
**
** Copyright (C) 2016 Pelagicore AG
** Contact: https://www.qt.io/licensing/
**
** This file is part of the documentation of the Pelagicore Application Manager.
**
** $QT_BEGIN_LICENSE:FDL-QTAS$
** Commercial License Usage
** Licensees holding valid commercial Qt Automotive Suite licenses may use
** this file in accordance with the commercial license agreement provided
** with the Software or, alternatively, in accordance with the terms
** contained in a written agreement between you and The Qt Company.  For
** licensing terms and conditions see https://www.qt.io/terms-conditions.
** For further information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!

\page configuration.html
\title Configuration

\chapter Main Configuration

The application-manager can be configured through config files and the command line.
The currently supported command-line options can always be displayed by running \c{appman --help}.
Some of these options can also be set via config files, which in itself are referenced on the
command-line with the \c{--config-file <filename>} option.

The config file is a YAML file, consisting of exactly one object and it supports a subset of the
command-line options.

\table
\header
    \li Command Line \br \e {Config key}
    \li Type
    \li Description
\row
    \li \b {(first non-option)}
    \br \e ui/mainQml
    \li string
    \li The main QML file.
\row
    \li \b --help
    \br \e -
    \li bool
    \li Prints the supported options and exits.
\row
    \li \b --version
    \br \e -
    \li bool
    \li Prints the current version of the application-manager and exits.
\row
    \li \b --build-config
    \br \e -
    \li bool
    \li Prints the build configuration of the application-manager in YAML format and exits.
\row
    \li \b --config-file or \c -c
    \br \e -
    \li array<string>
    \li Loads configuration settings from a set of files. Using more than one config file could be
        used to cleanly split the configuration into a device specific and a UI specific part.
        (default: \c /opt/am/config.yaml)
\row
    \li \b --database
    \br \e applications/database
    \li string
    \li The location of the application database. (default: \c /opt/am/apps.db)
\row
    \li \b --recreate-database or \c -r
    \br \e -
    \li bool
    \li Recreate the application database by (re)scanning all \c info.yaml files in \c
        builtin-apps-manifest-dir and \c installed-apps-manifest-dir. (default: false)
\row
    \li \b --builtin-apps-manifest-dir
    \br \e applications/builtinAppsManifestDir
    \li string
    \li The base directory for built-in application manifests. You can also specify multiple
        directories as a list.
\row
    \li \b --installed-apps-manifest-dir
    \br \e applications/installedAppsManifestDir
    \li string
    \li The base directory for installed application manifests. (defaults: \c /opt/am/manifests)
\row
    \li \b --app-image-mount-dir
    \br \e applications/appImageMountDir
    \li string
    \li The base directory where application images are mounted to. (defaults: \c /opt/am/image-mounts)
\row
    \li \b --dbus
    \br \e -
    \li string
    \li Register the ApplicationManager, ApplicationInstaller, NotificationManager and
        WindowManager on the specified D-Bus: can be either \c session, \c system, \c none (for no
        registration at all) or a full D-Bus bus specification string. (default: session)
        \note On production systems, you most likely want to put the application-manager on the
              \c system bus, where you can set detailed security policies using standard D-Bus
              mechanisms, while keeping the NotificationManager on the session bus. See the more
              advanced config-file option \c dbus below.
\row
    \li \b -
    \br \e dbus
    \li map<object>
    \li Allows for more fine-grained control over D-Bus registrations and function call policies.
        Every key (with one exception - see next) in this map corresponds to the D-Bus interface
        name you want to configure (\c io.qt.ApplicationManager, \c io.qt.ApplicationInstaller or \c
        org.freedesktop.Notifications). If such a key is present, it will take precedence over the
        command-line option \c dbus. Each key's value is a \l{D-Bus specification} object.
\row
    \li \b -
    \br \e dbus/registrationDelay
    \li int
    \li The non-interface key \c registrationDelay within the \c dbus object is an integer value,
        which delays the registration of the global D-Bus interfaces by the field's value in
        milli-seconds: the default value of \c -1 will register them synchronously, while \c 0 will
        register them on the first run of the event loop.
\row
    \li \b --fullscreen
    \br \e ui/fullscreen
    \li bool
    \li Display in full-screen. (default: false)
\row
    \li \b --no-fullscreen
    \br \e -
    \li bool
    \li Override full-screen setting in the System-UI's config file. Useful for development on the
        desktop. (default: false)
\row
    \li \b -
    \br \e ui/windowIcon
    \li string
    \li If set, the given image file will be used as a window icon for all application-manager
        windows. This setting is only useful for development and will only take effect on Windows,
        Mac OS X and Linux/X11.
\row
    \li \b -I
    \br \e ui/importPaths
    \li array<string>
    \li Add an additional QML import path to the system UI.
\row
    \li \b -
        \target additional configuration
    \br \e ui/additionalConfiguration
    \li object
    \li Exports the YAML object as the ApplicationManager property ApplicationManager::additionalConfiguration
        to the System-UI and as the ApplicationInterface::additionalConfiguration to all QML
        applications. The object will just be converted to a QVariantMap, but the application-manager
        will not interpret it in any way.
        Non-QML applications can access this data via the environment variable \c $AM_RUNTIME_ADDITIONAL_CONFIGURATION
        as a YAML snippet.
\row
    \li \b --verbose
    \br \e -
    \li bool
    \li Enable verbose output. For more control over the logging output, see \c logging-rules
        below. (default: false)
\row
    \li \b --slow-animations
    \br \e -
    \li bool
    \li Run all animations in slow motion. (default: false)
\row
    \li \b --load-dummydata
    \br \e ui/loadDummyData
    \li bool
    \li Loads QML dummy-data into the system UI (just like \c qmlscene would).
\row
    \li \b --no-security
    \br \e flags/noSecurity
    \li bool
    \li Disables all security related checks. Use this in a development setup only! (default: false)
\row
    \li \b --no-ui-watchdog
    \br \e flags/noUiWatchdog
    \li bool
    \li Disables detecting hung UI applications (e.g. via Wayland's ping/pong). (default: false)
\row
    \li \b --force-single-process
    \br \e flags/forceSingleProcess
    \li bool
    \li Forces single-process mode even on a Wayland enabled build. (default: false)
\row
    \li \b --single-app
    \br \e -
    \li string
    \li Runs the application-manager with a single application only (ignoring the database).
        In this mode, the application-manager can act as a \c qmlscene replacement.
        The argument is the path to \c info.yaml. Aliases (\c{info-*.yaml}) will also be
        loaded from the given path.
\row
    \li \b --logging-rule
    \br \e logging/rules
    \li array<string>
    \li Adds a standard Qt logging rules - please see the Qt documentation for the required
        format.
\row
    \li \b -
    \br \e installationLocation
    \li array<object>
    \li Definition of available installation locations on the system. This is an array of
        \l {Installation Locations} objects.
\row
    \li \b -
    \br \e runtimes
    \li map<object>
    \li This can be used to specify options for runtimes - the key in this map is the
        runtime's name and the value is interpreted by the respective runtime implementation.
        \l {Runtime configuration}{See below} for specific information.
\row
    \li \b -
    \br \e containers
    \li map<object>
    \li This can be used to specify options for containers - the key in this map is the
        container's name and the value is interpreted by the respective container implementation.
        \l {Container configuration}{See below} for specific information.
\row
    \li \b -
    \br \e quicklaunch/idleLoad
    \li real
    \li This is a system-load value between \c 0 and \c 1. The application-manager will not start
        a new quick-launcher, as long as the idle-load of the system is higher than this value.
        (default: 0)
\row
    \li \b -
    \br \e quicklaunch/runtimesPerContainer
    \li int
    \li Specifies how many quick-launchers should always be ready for all active container/runtime
        combinations. (default: 0)
        \note Values bigger than 10 will be ignored, since this does not make sense and could also
              potentially freeze your device if you have a container plugin were instantiation
              is expensive resource-wise.
\row
    \li \b --wayland-socket-name
    \br \e -
    \li  string
    \li A filesystem name for the Wayland socket that should be used when creating the compositor
        component. (default: \c wayland-0)
        \note You can only specify the name here, but not a path: Wayland will always create this
              socket in \c{$XDG_RUNTIME_DIR} and will fail to start the compositor, if this
              directory is not writable or if the environment variable is not even set in the first
              place.
\row
    \li \b -
    \br \e installer/caCertificates
        \target ca certificates
    \li list<string>
    \li A list of file-paths to CA-certifcates that are used to verify packages. For more details,
        see the \l {Public Key Infrastructure} {Installer documentation}.
\row
    \li \b -
    \br \e crashAction
    \li object
    \li Specifies which actions to take, if the application-manager is crashing. See
        \l{Crash action specification} {below} for more information.

\omit
telnetPort and telnetAddress: these are configuring the Pelagicore proprietary telnet component
applicationUserIdSeparation: this should be factored out into a container plugin
\endomit
\endtable

\chapter D-Bus Specification

These YAML objects describe both which D-Bus interfaces are registered on as well as access
policies.

\table
\header
    \li Name
    \li Type
    \li Description
\row
    \li \c register
    \li string
    \li Register the interface on the specified D-Bus: can be either \c session, \c system, \c none
        or \c ~ (for no registration at all) or a full D-Bus bus specification string.
\row
    \li \c policy
    \li map<object>
    \li These optional access policies can be used either instead of or in addition to the standard
        D-Bus policy configuration. The keys into this map are the (undecorated) D-Bus function
        names (e.g. \c startApplication). As soon as a key is specified, the corresponding function's
        access policy is \c deny, until you add \c allow criterias (all of them are and-ed):


\endtable

A simple example, that would only allow applications with the capability \c appstore, running with
user-id \c 1000 to call the installer's \c startPackageInstallation function, while preventing anyone
to remotely call \c acknowledgePackageInstallation:

\badcode
...
dbus:
  io.qt.ApplicationInstaller:
    register: 'session'
    policy:
      startPackageInstallation:
        uids: [ 1000 ]
        capabilities: [ 'appstore' ]
      acknowledgePackageInstallation: ~
...
\endcode


\chapter Installation Locations

The \c installationLocations YAML field is a list of YAML objects, very similar to
ApplicationInstaller::getInstallationLocation

\table
\header
    \li Name
    \li Type
    \li Description
\row
    \li \c id
    \li string
    \li The installation location id that is used as the handle for all other ApplicationInstaller
        function calls. The \c id consists of the \c type and \c index field, concatenated by
        a single dash (for example, \c removable-0).

        Valid values for \c type are \c internal and \c removable.

        In case there is more than one installation location for the same type of device, this
        zero-based index is used for disambiguation. For example, two SD card slots will result in the
        ids \c removable-0 and \c removable-1. Otherwise, the index is always \c 0.
\row
    \li \c isDefault
    \li bool
    \li Exactly one installation location can be the default location which must be mounted and
        accessible at all times. This can be used by an UI application to get a sensible
        default for the installation location that it needs to pass to startPackageInstallation().
\row
    \li \c installationPath
    \li string
    \li The absolute file-system path to the base directory under which applications are installed.
\row
    \li \c documentPath
    \li string
    \li The absolute file-system path to the base directory under which per-user document
        directories are created. This entry can either be located on this device, or it can be the
        same as the \c documentPath of the master installation location.
\row
    \li \c mountPoint
    \li string
    \li Only required for \c removable installation location: The absolute file-system path to the
        mount-point of the device where \c installationPath is located.
\endtable

\chapter Runtime Configuration

The runtime configuration sub-objects are specific to the actual runtimes, so the table below has
an additional column specifying which runtime a configuration option applies to:

\table
\header
    \li Name
    \li Runtimes
    \li Type
    \li Description
\row
    \li \c environmentVariables
    \li native, qml
    \li map<string>
    \li A simple string-to-string map, describing the environment variables that should be set when
        spawning the runtime process. You can remove a variable from the default environment by
        giving it an empty or null value.
\row
    \li \c importPaths
    \li qml
    \li array<string>
    \li Add an additional QML import path for apps started via this runtime.
\row
    \li \c loadDummyData
    \li qml
    \li bool
    \li Loads QML dummy-data into the app (just like \c qmlscene would). Defaults to \c false.
\row
    \li \c backgroundColor
    \li qml
    \li string
    \li If set, the main window of the app will get this color set as the default clear color. This
        will also give the surface an 8-bit alpha buffer.
\row
    \li \c crashAction
    \li qml
    \li object
    \li Specifies which actions to take, if a QML client application is crashing. See
        \l{Crash Action Specification} {below} for more information.
\endtable

\chapter Crash Action Specification

These sub-objects specify which actions to take, if the application-manager or QML runtimes are
crashing.

\note All of these actions only work on Linux.

The following conditions will be handled:

\list
\li Uncaught exceptions. Exceptions derived from \c std::exception will also show the \c {what()}
    information.
\li \c SIGSEGV
\li \c SIGBUS
\li \c SIGILL
\li \c SIGFPE
\li \c SIGPIPE
\endlist

\table
\header
    \li Name
    \li Type
    \li Description
\row
    \li \c printBacktrace
    \li bool
    \li Try to print a readable backtrace. Will use the primitive backtrace functionality from glibc,
        unless libbacktrace was enabled at configure time (default: true).
\row
    \li \c dumpCore
    \li bool
    \li Will end the process via \c abort instead of \c _Exit. This will dump a \c core file,
        depending on your kernel configuration (default: true).
\row
    \li \c waitForGdbAttach
    \li int
    \li Specifies a timeout in seconds while the crashed program is being held in the stopped state,
        waiting for a debugger to attach. Any value \c{<= 0} will skip this step (default: 0).
\endtable

*/
